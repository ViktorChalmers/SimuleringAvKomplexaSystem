import numpy as np

def blinker():
    state = np.zeros([10, 10])
    state[1][2] = 1
    state[2][2] = 1
    state[3][2] = 1

    return state
def toad():
    state = np.zeros([10, 10])
    state[3][3] = 1
    state[3][4] = 1
    state[3][5] = 1
    state[4][4] = 1
    state[4][5] = 1
    state[4][6] = 1
    return state
def beacon():
    state = np.zeros([10, 10])
    state[3][3] = 1
    state[3][4] = 1
    state[4][3] = 1

    state[6][5] = 1
    state[6][6] = 1
    state[5][6] = 1
    return state
def glider(rot = 0):
    state = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, ],
             [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ]
             ]
    for i in range(rot):
        state = np.rot90(state)
    return state

def block():
    state = np.zeros([10,10])
    state[3][3] = 1
    state[3][4] = 1
    state[4][3] = 1
    state[4][4] = 1
    return state

def beehive():
    state = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, ],
             [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
             ]
    return state

def loaf():
    state = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, ],
             [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, ],
             [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
             ]
    return state

def boat():
    state = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
             ]
    return state

def tub():
    state = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
             ]
    return state

def rand(size = [10,10],padding = 0):
    state = np.random.randint(2, size=[size[0], size[1]])
    state = np.pad(state, padding, mode='constant')
    return state


#state = np.array([
#        [1,1,1],
#        [1, 0, 0],
#        [0, 0, 0]
#    ])

#state = np.array([
#        [1,1,1],
#        [0, 1, 0],
#        [0, 0, 0]
#    ])

#state = np.array([
#        [0,1,1],
#        [1, 0,1],
#        [0, 1, 0]
#    ])